#!/bin/bash
# Uwaga! Wazne zalozenie do wspolpracy z repozytorium bocm
# Skrypt bez parametrow nie moze na ekran wyrzucic nic,
# poza nazwa obrazu kontenera z tagiem, lub napisem Error.
#
# Przyklad wyjscia; ubuntu1804:1.8.67
#
# Jesli pierwszym parametrem jest -d, wyjscie moze byc dowolne. Nie ma zandych obostrzen


if [ "x$1" = "x-d" ]; then
  MODE=dev
else
  MODE=build
fi

pushd $(pwd) > /dev/null
RUNDIR=$(dirname $(readlink -f $0))
cd ${RUNDIR}

cleanup() {
  popd > /dev/null
}

trap cleanup EXIT

# Zwiekszanie numeru wersji
# Wywolanie; increment_version stary_numer_wersji
# Wynik: nowy_powiekszony_o_jeden_numer_wersji
incrementVersion ()
{
  declare -a part=( ${1//\./ } )
  declare new
  declare -i carry=1

  for (( CNTR=${#part[@]}-1; CNTR>=0; CNTR-=1 )); do
    len=${#part[CNTR]}
    new=$((part[CNTR]+carry))
    [ ${#new} -gt $len ] && carry=1 || carry=0
    [ $CNTR -gt 0 ] && part[CNTR]=${new: -len} || part[CNTR]=${new}
  done
  new="${part[*]}"
  echo -e "${new// /.}"
}

# Okreslenie nazwy kontenera na podstawie nazwy repozytorium czyli nazwy katalogu
getImageName ()
{
  IMG=${RUNDIR}
  IMG=${IMG##*\/}
  IMG=${IMG%*src}
  printf "$IMG\n"
}

IMG=$(getImageName)
VER=$(incrementVersion $(cat ./VERSION))
IMG=${IMG}:$(cat ./VERSION)

printf "$VER\n" > ./VERSION

if [ ${MODE} == "dev" ]; then
  docker build -t ${IMG} ./
else
  docker build -q -t ${IMG} ./ > /dev/null && printf "${IMG}\n" || printf "Error\n"
fi

